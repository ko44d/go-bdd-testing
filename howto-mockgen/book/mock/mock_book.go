// Code generated by MockGen. DO NOT EDIT.
// Source: book.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBook is a mock of Book interface.
type MockBook struct {
	ctrl     *gomock.Controller
	recorder *MockBookMockRecorder
}

// MockBookMockRecorder is the mock recorder for MockBook.
type MockBookMockRecorder struct {
	mock *MockBook
}

// NewMockBook creates a new mock instance.
func NewMockBook(ctrl *gomock.Controller) *MockBook {
	mock := &MockBook{ctrl: ctrl}
	mock.recorder = &MockBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBook) EXPECT() *MockBookMockRecorder {
	return m.recorder
}

// GetAuthor mocks base method.
func (m *MockBook) GetAuthor() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockBookMockRecorder) GetAuthor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockBook)(nil).GetAuthor))
}

// GetPages mocks base method.
func (m *MockBook) GetPages() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPages")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetPages indicates an expected call of GetPages.
func (mr *MockBookMockRecorder) GetPages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPages", reflect.TypeOf((*MockBook)(nil).GetPages))
}

// GetTitle mocks base method.
func (m *MockBook) GetTitle() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTitle")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTitle indicates an expected call of GetTitle.
func (mr *MockBookMockRecorder) GetTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTitle", reflect.TypeOf((*MockBook)(nil).GetTitle))
}
